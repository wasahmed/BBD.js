////USING UNDEFINED////
You can use undefined to determine whether a variable has a value.
    > undefined value converts to NaN when used in numeric context
    > undefined value behaves as false when used in a boolean context

////VARIABLE SCOPE////
When you declare a variable outside of any function, it is called a global variable,
because it is available to any other code in the current document. When you declare
a variable within a function, it is called a local variable, because it is available
only within that function

    >var : JavaScript before ES2015 does not have block statement scope; rather, a variable 
    declared within a block is local to the function (or global scope) that the block resides 
    within

    >let : introduced for block scope

    >variable hoisting (var)
    variables in JavaScript are in a sense "hoisted" or lifted to the top of the function or statement.
    However, variables that are hoisted will return a value of undefined. 
    So even if you declare and initialize after you use or refer to this variable, it will still return undefined.
    look @ example
    Because of hoisting, all var statements in a function should be placed as near to the top of the function as possible.

    >function hoisting works for function declaration, not for function expressions

////DATA TYPES////
JavaScript is a dynamically typed language. That means you don't have to specify the data type of a variable when you declare
it, and data types are converted automatically as needed during script execution.

////Exception Handling////
You can throw exceptions using the throw statement and handle them using the try...catch statements.

////Promises////

////Loops////
    The continue statement can be used to restart a loop. When you use continue within a loop or switch,
    it terminates the current iteration of the innermost enclosing loop and continues execution of the
    loop with the next iteration. In contrast to the break statement, continue does not terminate 
    the execution of the loop entirely. For example, in a for loop, it jumps to the increment-expression.

    >The for...in statement iterates a specified variable over all the enumerable properties of an object. 
    For each distinct property, JavaScript executes the specified statements (use for objs)

    >The for...of statement creates a loop iterating over iterable objects, invoking a custom iteration 
    hook with statements to be executed for the value of each distinct property. (use for arrays)

////Nested functions////
    >You can nest a function within a function. The nested (inner) function is private to its containing 
    (outer) function. It also forms a closure. A closure is an expression (typically a function) that can
     have free variables together with an environment that binds those variables (that "closes" the expression).

    Since a nested function is a closure, this means that a nested function can "inherit" the arguments and variables 
    of its containing function. In other words, the inner function contains the scope of the outer function.

    To summarize:

    The inner function can be accessed only from statements in the outer function.
    The inner function forms a closure: the inner function can use the arguments and 
    variables of the outer function, while the outer function cannot use the arguments and variables of the inner function.

////Closures//// ??? What are closures used for, how do they compare to object getters and setters
Closures are one of the most powerful features of JavaScript. JavaScript allows for the nesting of functions and grants the inner
function full access to all the variables and functions defined inside the outer function (and all other variables and functions that 
the outer function has access to). However, the outer function does not have access to the variables and functions defined inside the 
inner function. This provides a sort of encapsulation for the variables of the inner function. Also, since the inner function has access 
to the scope of the outer function, the variables and functions defined in the outer function will live longer than the duration of the 
inner function execution, if the inner function manages to survive beyond the life of the outer function. A closure is created when the 
inner function is somehow made available to any scope outside the outer function.

////Date time////
    var dateObjectName = new Date([parameters]);
    where dateObjectName is the name of the Date object being created; it can be a new object or a property of an existing object.

    Calling Date without the new keyword returns a string representing the current date and time.

////Strings///
    > are imutable therefore can't change single characters
    > string object vs string literal

////JavaScript objects////
    >In JavaScript, an object is a standalone entity, with properties and a type.Compare it with a cup, for example.
     A cup is an object, with properties. A cup has a color, a design, weight, a material it is made of, etc. The same 
     way, JavaScript objects can have properties, which define their characteristics.

////Classes////
    >Class declarations are not hoisted like function declarations